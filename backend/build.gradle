plugins {
    id 'org.springframework.boot' version '2.6.8'
    id 'io.spring.dependency-management' version '1.0.11.RELEASE'
    id 'org.asciidoctor.convert' version '1.5.9.2'
    id 'java'
    id 'jacoco'
    id "org.sonarqube" version "3.3"
}

group = 'com.woowacourse'
version = '0.0.1-SNAPSHOT'
sourceCompatibility = '11'

configurations {
    compileOnly {
        extendsFrom annotationProcessor
    }
}

repositories {
    mavenCentral()
}

ext {
    set('snippetsDir', file("build/generated-snippets"))
}

dependencies {
    implementation 'org.springframework.boot:spring-boot-starter-validation'
    implementation 'org.springframework.boot:spring-boot-starter-web'

    compileOnly 'org.projectlombok:lombok'
    annotationProcessor 'org.projectlombok:lombok'

    implementation 'org.springframework.boot:spring-boot-starter-data-jpa'
    runtimeOnly 'com.h2database:h2'
    runtimeOnly 'mysql:mysql-connector-java'

    implementation 'io.jsonwebtoken:jjwt-api:0.11.5'
    runtimeOnly 'io.jsonwebtoken:jjwt-impl:0.11.5'
    runtimeOnly 'io.jsonwebtoken:jjwt-jackson:0.11.5'

    implementation 'org.springframework.boot:spring-boot-starter-cache'
    implementation 'org.springframework.boot:spring-boot-starter-webflux'
    implementation 'org.apache.httpcomponents:httpclient'

    implementation 'net.rakugakibox.spring.boot:logback-access-spring-boot-starter:2.7.1'

    implementation 'org.springframework.boot:spring-boot-starter-actuator'
    implementation 'io.micrometer:micrometer-registry-prometheus:1.9.4'

    testImplementation 'org.springframework.boot:spring-boot-starter-test'
    testImplementation 'org.springframework.restdocs:spring-restdocs-mockmvc'
    testImplementation 'io.rest-assured:rest-assured:4.4.0'
    asciidoctor 'org.springframework.restdocs:spring-restdocs-asciidoctor:2.0.5.RELEASE'
}

tasks.named('test') {
    outputs.dir snippetsDir
    useJUnitPlatform()
    finalizedBy jacocoTestReport
}

tasks.named('asciidoctor') {
    inputs.dir snippetsDir
    dependsOn test
}

task createDocument(type: Copy) {
    dependsOn asciidoctor

    from file("build/asciidoc/html5/index.html")
    into file("src/main/resources/static")
}

task buildDocument(type: Copy) {
    dependsOn createDocument

    from file("build/asciidoc/html5/index.html")
    into file("build/resources/main/static")
}

bootJar {
    dependsOn buildDocument
}

sonarqube {
    properties {
        property 'sonar.projectKey', 'thankoo'
        property "sonar.sources", "src"
        property "sonar.language", "java"
        property "sonar.sourceEncoding", "UTF-8"
        property "sonar.profile", "Sonar way"
        property "sonar.java.binaries", "${buildDir}/classes"
        property "sonar.test.inclusions", "**/*Test.java"
        property "sonar.coverage.exclusions", "src/test/**/*,**/dto/*,**/exception/*,**/config/*,**/ThankooApplication.java,**/alert/**/*"
        property "sonar.coverage.jacoco.xmlReportPaths", "build/jacoco/index.xml"
    }
}

jacoco {
    toolVersion = "0.8.8"
}

jacocoTestReport {
    dependsOn test
    reports {
        html.enabled true
        xml.enabled true
        csv.enabled true

        html.destination file("build/jacoco/index.html")
        xml.destination file("build/jacoco/index.xml")
    }
}

